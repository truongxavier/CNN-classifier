
import streamlit as st
from PIL import Image
import os
import requests
import json
import shutil
import tempfile

#-------------------------------------------------------------------------------
# Param√©trage de lancement
#-------------------------------------------------------------------------------

image_path = "images"
name_app ='DocuMancer'
couleur_fond = '#2ED4DA'
couleur_police = '#382DD5'
#-------------------------------------------------------------------------------
# Param√©trage de lancement
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# CSS
#-------------------------------------------------------------------------------
st.markdown("""
    <style>
    /* Styles pour le bouton de t√©l√©chargement */
    .stDownloadButton > button, .stDownloadButton > button * {
        background-color: #2ED4DA;
        color: #382DD5;
        border: none;
        padding: 2px 6px !importants;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        border-radius: 15px;
        font-family: Arial, sans-serif; /* Ajout de la police */
        font-weight: bold !important;
    }

    /* Styles pour les boutons LinkedIn */
    a.linkedin-button {
        display: inline-block; /* Changement de 'block' √† 'inline-block' */
        background-color: #2ED4DA !important;
        color: #382DD5 !important;
        font-weight: bold;
        padding: 2px 6px;
        text-decoration: none !important;
        border: none;
        border-radius: 15px;
        text-align: center;
        margin: 10px auto;
        width: 200px;
    }

    /* Appliquer les styles aux diff√©rents √©tats du lien */
    a.linkedin-button:link,
    a.linkedin-button:visited,
    a.linkedin-button:hover,
    a.linkedin-button:active {
        background-color: #2ED4DA !important;
        color: #382DD5 !important;
        text-decoration: none !important;
    }

    /* Styles pour la liste et les √©l√©ments de liste */
    ul.linkedin-list {
        list-style-type: none;
        padding: 0; /* Supprimer le padding par d√©faut */
        margin: 0;  /* Supprimer la marge par d√©faut */
        text-align: center; /* Centrer le contenu de la liste */
    }

    ul.linkedin-list li {
        display: block;
        margin-bottom: 2px; /* Ajouter de l'espace entre les boutons */
    }

    /* Justifier le texte des paragraphes */
    .content p, .content li {
        text-align: justify;
    }

    /* Styles pour le bloc de pr√©diction */
    .prediction-box {
        background-color: #2ED4DA;
        padding: 15px;
        border-radius: 10px;
        margin-top: 20px;
    }

    .prediction-box h3 {
        margin: 0;
        color: #382DD5;
        text-align: center;
    }

    .prediction-box h3 span {
        font-weight: bold;
    }

    .prediction-box p {
        font-size: 18px;
        margin: 5px 0;
        color: #382DD5;
        text-align: center;
    }

    .prediction-box p span {
        font-weight: bold;
    }

    /* Centrer l'image dans la fen√™tre modale en plein √©cran */
    div[role="dialog"] .stImage img {
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    </style>
    """, unsafe_allow_html=True)

# Ic√¥ne de baguette magique (vous pouvez choisir n'importe quelle ic√¥ne de Font Awesome ou une autre biblioth√®que d'ic√¥nes)
icon = "ü™Ñ"  # Ici c'est l'emoji "baguette magique", mais on pourrait aussi utiliser une ic√¥ne Font Awesome

# Cr√©er le titre avec style
title_html = f"""
    <h1 style='text-align: center; color: #2ED4DA;'>{name_app} {icon}</h1>
"""
#-------------------------------------------------------------------------------
# CSS
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# m√©thode principale
#-------------------------------------------------------------------------------
def main():
    #---------------------------------------------------------------------------
    # Sidebar
    #---------------------------------------------------------------------------
    image_datascientest = Image.open(image_path + '/datascientest.png')
    st.sidebar.image(image_datascientest, use_container_width=True)
    st.sidebar.markdown(title_html, unsafe_allow_html=True)

    page = st.sidebar.radio('Aller √†', [
        'Introduction au Projet',
        'Architecture du projet',
        'Les services expos√©s',
        'Entrainons le mod√®le',
        'Pr√©diction',
        'Conclusion & perspectives'
    ])
    st.sidebar.markdown('<br>', unsafe_allow_html=True)
    st.sidebar.markdown(
        '''
        <div style="background-color: #0E1117; padding: 10px; border-radius: 5px; text-align: center;">
            <h3 style="margin-bottom: 20px;">MLOPS - Promotion Bootcamp MLE √©t√© 2024</h3>
            <h3>Participants</h3>
            <ul class="linkedin-list">
                <li>
                    <a href="https://www.linkedin.com/in/k√©vin-ory" target="_blank" class="linkedin-button">Kevin Ory</a>
                </li>               
                <li>
                    <a href="https://www.linkedin.com/in/truong-xavier" target="_blank" class="linkedin-button">Xavier Truong</a>
                </li>
            </ul>
        </div>
        ''',
        unsafe_allow_html=True
    )
    #---------------------------------------------------------------------------
    # Sidebar
    #---------------------------------------------------------------------------


    #---------------------------------------------------------------------------
    # Introduction au Projet
    #---------------------------------------------------------------------------
    if page == 'Introduction au Projet':
        # st.image(image_path + '/Documancer.gif', use_container_width=True)
        st.image(image_path + '/Documancer3.gif', use_container_width=True)
        st.title('pr√©sentation de '+ name_app)
        st.subheader('Introduction et Contexte du Projet')
        st.markdown('''
        Dans un monde o√π de nombreux secteurs comme la finance, la sant√©, et le juridique sont submerg√©s de documents physiques et num√©riques, l'automatisation de leur gestion est un enjeu crucial.
        Notre projet s'est concentr√© sur la classification automatique de documents en utilisant des techniques avanc√©es de deep learning.
        Le dataset que nous avons utilis√©, RVL-CDIP, contient 400 000 images de documents r√©partis en 16 cat√©gories (lettres, factures, m√©mos, etc.).
        ''')
        st.subheader('Objectifs du Projet')
        st.markdown('''
        L'objectif principal du projet est de d√©velopper le MLOPS pour notre CNN , pour la classification de documents
        ''')
        st.image(image_path + '/cnn_workflow.png', use_container_width=True)
        
    #---------------------------------------------------------------------------
    # Architecture du projet
    #---------------------------------------------------------------------------
    elif page == 'Architecture du projet':

        st.title('Architecture du projet')
        st.markdown('''
        L'architecture du projet est bas√©e sur une approche MLOPS, qui combine les pratiques de Machine Learning et DevOps.
                    
        ''')
        st.image(image_path + '/Architecture.jpg', use_container_width=True)
        st.title('Cycle mlpos')
        st.image(image_path + '/cyclemlops.jpg', use_container_width=True)
        st.title('Fine tuning du mod√®le pour r√©entrainement')
        st.image(image_path + '/finetuningmodel.jpg', use_container_width=True)
        st.title('G√©n√©rtion du drift')
        st.image(image_path + '/generationdrift.jpg', use_container_width=True)
        st.title('Flux du monitoring mis en place')
        st.image(image_path + '/fluxmonitoring.jpg', use_container_width=True)
    #---------------------------------------------------------------------------
    # Les services expos√©s
    #---------------------------------------------------------------------------
    elif page == 'Les services expos√©s':
        st.title('Les services expos√©s')
        
        # CSS modifi√© pour un th√®me sombre
        st.markdown("""
            <style>
            .service-container {
                background-color: #1E1E1E;
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
            }
            .service-item {
                background-color: #2D2D2D;
                padding: 15px;
                margin: 10px 0;
                border-radius: 8px;
                border: 1px solid #3D3D3D;
                display: flex;
                justify-content: space-between;
                align-items: center;
                transition: transform 0.2s ease-in-out;
            }
            .service-item:hover {
                transform: translateX(5px);
                background-color: #333333;
            }
            .service-name {
                color: #2ED4DA;
                font-weight: bold;
                font-size: 1.1em;
            }
            .service-url {
                color: #969696;
            }
            .service-url a {
                color: #2ED4DA;
                text-decoration: none;
                transition: color 0.2s ease-in-out;
            }
            .service-url a:hover {
                color: #382DD5;
            }
            .service-description {
                background-color: #1E1E1E;
                padding: 20px;
                border-radius: 10px;
                margin-top: 20px;
            }
            .service-description h3 {
                color: #2ED4DA;
                margin-bottom: 15px;
            }
            .service-description ul {
                list-style-type: none;
                padding-left: 0;
            }
            .service-description li {
                color: #FFFFFF;
                margin-bottom: 10px;
                padding-left: 20px;
                position: relative;
            }
            .service-description li::before {
                content: "‚Ä¢";
                color: #2ED4DA;
                position: absolute;
                left: 0;
            }
            </style>
        """, unsafe_allow_html=True)
        
        # Affichage des services avec ic√¥nes
        services = [
            {"name": "Grafana", "url": "http://localhost:3100", "icon": "üìä"},
            {"name": "Prometheus", "url": "http://localhost:9090", "icon": "üìà"},
            {"name": "Metrics Exporter", "url": "http://localhost:8000", "icon": "üì§"},
            {"name": "MLflow", "url": "http://localhost:8080", "icon": "üîÑ"},
            {"name": "Drift Monitoring", "url": "http://localhost:8088", "icon": "üìâ"}
        ]
        
        st.markdown('<div class="service-container">', unsafe_allow_html=True)
        for service in services:
            st.markdown(f"""
                <div class="service-item">
                    <div>
                        <span class="service-name">{service['icon']} {service['name']}</span>
                    </div>
                    <span class="service-url">
                        <a href="{service['url']}" target="_blank">{service['url']}</a>
                    </span>
                </div>
            """, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown("""
        <div class="service-description">
            <h3>Description des services</h3>
            <ul>
                <li><strong>Grafana</strong> : Interface de visualisation pour le monitoring des m√©triques en temps r√©el. Permet de cr√©er des tableaux de bord personnalis√©s pour suivre les performances du syst√®me.</li>
                <li><strong>Prometheus</strong> : Syst√®me de collecte et stockage des m√©triques. Assure la surveillance continue des performances et la disponibilit√© des services.</li>
                <li><strong>Metrics Exporter</strong> : Service d'exposition des m√©triques du mod√®le, permettant le suivi des performances et la sant√© du syst√®me de pr√©diction.</li>
                <li><strong>MLflow</strong> : Plateforme de gestion du cycle de vie ML, permettant le suivi des exp√©riences, la comparaison des mod√®les et la gestion des d√©ploiements.</li>
                <li><strong>Drift Monitoring</strong> : Syst√®me de surveillance de la d√©rive des donn√©es, assurant la d√©tection pr√©coce des anomalies et des changements dans les patterns de donn√©es.</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    #---------------------------------------------------------------------------
    # Entrainons le mod√®le
    #---------------------------------------------------------------------------
    elif page == 'Entrainons le mod√®le':
        st.title('Entrainons le mod√®le')
        
           

    #---------------------------------------------------------------------------
    # Pr√©diction 
    #---------------------------------------------------------------------------
    #---------------------------------------------------------------------------
    # Pr√©diction 
    #---------------------------------------------------------------------------
    elif page == 'Pr√©diction':
        st.image(image_path + '/Documancer.gif', use_container_width=True)
        st.title('Pr√©diction par nos mod√®les')
        st.markdown('''
        Les pr√©dictions ont √©t√© r√©alis√©es √† l'aide de plusieurs mod√®les d√©crits dans la strat√©gie d√©ploy√©e : CNN, BERT, et l'approche multimodale CNN-BERT.
        Vous pouvez visualiser ici les pr√©dictions effectu√©es par chaque mod√®le sur un √©chantillon de documents.
        ''')

        def generate_token():
            url = "http://localhost:3000/generate_token"
            headers = {"Content-Type": "application/json"}
            data = {"username": "test_user"}
            try:
                response = requests.post(url, headers=headers, json=data)
                if response.status_code == 200:
                    return response.json().get("token")
                else:
                    st.error("Erreur lors de la g√©n√©ration du token")
                    return None
            except Exception as e:
                st.error(f"Erreur de connexion: {str(e)}")
                return None

        def check_status():
            url = "http://localhost:3000/status_check"
            headers = {"Content-Type": "application/json"}
            try:
                response = requests.post(url, headers=headers, json={})
                return response.status_code == 200
            except:
                return False

        def predict_image(uploaded_file, token):
            url = "http://localhost:3000/predict"
            headers = {
                "Authorization": f"Bearer {token}",
                "accept": "application/json"
            }
            
            try:
                # V√©rifier les informations de l'image
                st.write(f"Type du fichier: {uploaded_file.type}")
                st.write(f"Taille du fichier: {len(uploaded_file.getvalue())} bytes")
                
                # Obtenir les bytes de l'image
                image_bytes = uploaded_file.getvalue()
                
                # Cr√©er le fichier multipart
                files = {
                    "image": (
                        uploaded_file.name,
                        image_bytes,
                        uploaded_file.type
                    )
                }
                
                st.write("Envoi de la requ√™te √† l'API...")
                response = requests.post(url, headers=headers, files=files)
                st.write(f"Status code: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    st.write("R√©ponse brute de l'API:", result)
                    return result
                else:
                    st.error(f"Erreur lors de la pr√©diction: {response.text}")
                    # Afficher les headers de la r√©ponse pour le debug
                    st.write("Headers de la r√©ponse:", dict(response.headers))
                    return None
            
            except Exception as e:
                st.error(f"Erreur de connexion: {str(e)}")
                # Afficher la stack trace compl√®te
                import traceback
                st.error(f"Stack trace: {traceback.format_exc()}")
                return None
            

            
        # V√©rifier le statut de l'API
        if not check_status():
            st.error("L'API n'est pas disponible. Veuillez v√©rifier que le serveur est en cours d'ex√©cution.")
        else:
            st.success("API connect√©e et pr√™te √† l'emploi !")

            # Uploader un fichier image
            uploaded_file = st.file_uploader("Choisissez une image", type=['jpg', 'jpeg', 'png', 'tif', 'tiff', 'webp'])
            
            if uploaded_file is not None:
                # Afficher l'image
                image = Image.open(uploaded_file)
                st.image(image, caption='Image Import√©e', use_container_width=True)

                # Bouton pour lancer la pr√©diction
                if st.button("Lancer la pr√©diction"):
                    with st.spinner('Pr√©diction en cours...'):
                        # G√©n√©rer un token
                        token = generate_token()
                        if token:
                            # Faire la pr√©diction directement avec le fichier upload√©
                            prediction = predict_image(uploaded_file, token)
                            
                            if prediction:
                                st.markdown("""
                                <div class="prediction-box">
                                    <h3>R√©sultats de la pr√©diction</h3>
                                    <p>Type de document pr√©dit : <span>{}</span></p>
                                    <p>Confiance : <span>{:.2f}%</span></p>
                                </div>
                                """.format(
                                    prediction.get("predicted_class", "Non disponible"),
                                    prediction.get("confidence", 0) * 100
                                ), unsafe_allow_html=True)

    #---------------------------------------------------------------------------
    # Conclusion & perspectives
    #---------------------------------------------------------------------------
    elif page == 'Conclusion & perspectives':
        st.title('Conclusion & perspectives')
        st.image(image_path + '/axeam√©lioration.jpg', use_container_width=True)
        st.markdown('''
        Le projet a d√©montr√© l'efficacit√© des mod√®les CNN classification de documents.
        Points forts de votre projet :

        MLflow pour le tracking des exp√©riences
        BentoML pour le serving
        Stack de monitoring robuste avec Prometheus/Grafana
        Gestion du drift avec des rapports d√©taill√©s

        M√©triques ML bien structur√©es
        Monitoring syst√®me
        Dashboards Grafana bien organis√©s
        Visualisation des performances du mod√®le

        Data drift

        D√©tection automatique
        G√©n√©ration de rapports d√©taill√©s
        Interface de visualisation via Nginx
        ''')
        st.title('Ce qui manque')
        st.image(image_path + '/composantsmanquant.jpg', use_container_width=True)
        st.markdown('''
        Points d'am√©lioration :

        Manque de CI/CD
        Pas de tests automatis√©s
        Absence de Kubernetes
        S√©curit√© basique
        ''')
        st.image(image_path + '/cicd.jpg', use_container_width=True)

#-------------------------------------------------------------------------------
# Lancement
#-------------------------------------------------------------------------------
if __name__ == "__main__":
    main()